import mysql.connector as sql

conn = sql.connect(host = "localhost", user = "root", password = "ashish2008")
cursor = conn.cursor(buffered = True)

try:
  create_db=("create database employee_management_system;")
  cursor.execute(create_db)
  cursor.execute("use employee_management_system")
except:
  cursor.execute("use employee_management_system")
try :
   creating_employees = ("Create table employee_Info (employee_Id varchar(20), Name varchar(20), Dept varchar(20), gender char(1), salary int,  Age int, remarks varchar(120), task varchar(50), 	          Task_Done char(1));")
  cursor.execute(creating_employees)
  conn.commit()

except:
  pass
try:
  
  creating_userInfo = ("create table userdata (username varchar(20), password varchar(8), designation varchar(20));")
  cursor.execute(creating_userInfo)
  conn.commit()
except :
  pass




def createacc():
  username = input("Enter a username")
  checkdata = ("SELECT Name, COUNT(*) FROM employee_Info WHERE NAME = '%s' GROUP BY NAME;")
  cursor.execute((checkdata)%(username))
  cursor.fetchall()
  row_count = cursor.rowcount
  if row_count >0 :
    while row_count != 0:
      print("The username already exist")
      username = input("enter a username")
      cursor.execute((checkdata)%(username))
      cursor.fetchall()
      row_count = cursor.rowcount
  if row_count ==0:
    passw = input("Enter a password")
    position = input("Enter your position (employee or employer)")
  if (position.lower() == "employee"):
    print("we will need more information to register your account")
    name = input("Enter employee name ")
    Emp_dept=input( "employee department : ")
    Emp_gender = input("enter employee gender('M' or 'F' )")
    Emp_salary=int(input ("enter employee salary:"))

    age = int(input("Enter employee age"))
    birth = 2020 - age
    Emp_Id = name+ str(birth)[2:4]
    sql_insert =(
      "Insert into employee_Info(employee_Id,Name,Dept,gender,salary,age) "
      "values('%s','%s','%s','%s',%s,%s);")
    values= (Emp_Id, name, Emp_dept, Emp_gender, Emp_salary, age)
    cursor.execute(sql_insert%values)
    print("Adding values.. ")
    addacc(username, passw, position)
    conn.commit()
    print("congrats you have joined suceessfully")
    print("REGISTRATION SUCCESSFUL ")
    print("your EmployeeId is"," ",Emp_Id)
  if position.lower() == "employer":
    addacc(username, passw, position)
    print("account succesfully added")
    conn.commit()


def addacc(username, password, position):
  sql_update= (
    "INSERT INTO userdata ( username, password, designation)"
    "VALUES('%s', '%s', '%s');")
  values2 = (username, password, position)
  cursor.execute(sql_update%values2)
  conn.commit()
    
def login():
  logged_in = False
  position = ""
  username = input("Enter your username ")
  passw  = input("Enter your password ")
  checkloginInfo =(
    "Select* FROM userdata WHERE username = '%s' AND password = '%s';")
  givenInfo = (username, passw)
  cursor.execute(checkloginInfo%givenInfo)
  result = cursor.fetchall()
  for i in result:
    if i[0] == username and i[1]== passw:
      logged_in = True
  while logged_in == False:
    print("The username or password is wrong")
    username = input("Enter your username again ")
    passw  = input("Enter your password again ")
    givenInfo = (username, passw)
    cursor.execute(checkloginInfo%givenInfo)
    result = cursor.fetchall()
    for i in result:
      if i[0] == username and i[1]== passw:
        logged_in = True
  conn.commit()
  cursor.execute(checkloginInfo%givenInfo)
  result = cursor.fetchall()
  for i in result:
    if i[2] == "employer":
      position = "employer"
    elif i[2] == "employee":
      position = "employee"
  if (position == "employer" ):
    employertasks()
  if (position == "employee"):
    employeetasks()
  

def employeetasks():
  print("1. View remarks")
  print("2. View Tasks")
  choice2 = int(input("what do you wish to do today ?"))
  if choice2 == 1 :
    view_remark =(
      "SELECT remarks FROM employee_Info WHERE "
      "employee_Id = '%s' ; ")
    name = input("enter your employee id")
    cursor.execute(view_remark%name)
    performance = cursor.fetchall()
    print(performance)
    conn.commit()
  elif choice2 == 2:
    emp_id = input("enter your employee id")
    check_task = ("select task from employee_Info where employee_Id = '%s' ;")
    cursor.execute(check_task%emp_id)
    see = cursor.fetchall()
    print(see[0])
    complete= input("has the task been completed? (y/n)")
    if complete == "y" :
      update_complete = ("update employee_Info set Task_Done ='Y' where employee_Id = '%s';")
      cursor.execute(update_complete%emp_id)
      print("updated")
      conn.commit()
    else:
      print("try to complete it as early as possible")


def employertasks():
  print("greetings..")
  print("1. Employee details")
  print("2. Add remarks for an employee")
  print("3. Assign tasks to employee") 
  print("4. Update Salary")
  print("5. Logout")
  print("6. Exit")
  

  choice=int(input("enter the choice:"))
  if choice==1:
    Details()
  elif choice==2:
    Work_experience()
  elif choice == 3:
    assign_tasks()
  elif choice == 4:
    update_salary()
  elif choice ==5 :
    startup()
  elif choice == 6:
    exit()
  conn.commit()

def back():
  print("1. back to options")
  print("2. logout")
  print("3. exit")
  options = int(input("Enter your choice"))
  if options== 1:
    employertasks()
  elif options ==2:
    startup()
  elif options==3:
    exit()
def Details():
  dept_info = input("which department are you looking for ? (all/dept)")
  cursor.execute("Select distinct Dept from employee_Info;")
  Dept= cursor.fetchall()
  if dept_info == "all":
    cursor.execute("SELECT* FROM employee_Info ORDER BY Name asc;")
    results=cursor.fetchall()
    a=cursor.rowcount
    print("total employees are",a)
    for x in results:
      print(x)
  elif (dept_info,) in Dept:
    sql_com = ("Select* from employee_Info where Dept = '%s' ; ")
    cursor.execute(sql_com%dept_info)
    Results = cursor.fetchall()
    for i in Results:
      print(i)
      a=cursor.rowcount
      print("total employees are",a)
      conn.commit()
  back()
      
def Work_experience():
  Employee_ID=input("enter your employee's ID")
  Employee_performance=input("enter your performance: ")
  add_remark = ("Update employee_Info set remarks = '%s' where employee_Id = '%s' ;")
  employeedata = (Employee_performance, Employee_ID)
  cursor.execute(add_remark%employeedata)
  conn.commit()
  print("Work Experience Added")
  back()

def assign_tasks():
  employee_n = input("whom would you like to appoint task(s)(enter employee Id)")
  task = input("enter the task")
  addtask = ("update employee_Info set task =  '%s' where employee_Id = '%s';")
  emp_details = (task, employee_n)
  cursor.execute(addtask%emp_details)
  print("task added")
  back()
def update_salary():
  Employee_Id = input("enter the employee's ID")
  emp_sal = int(input("enter the new salary"))
  previous_sal = ("select salary from employee_Info where employee_Id = '%s';")
  cursor.execute(previous_sal%Employee_Id)
  old_sal =cursor.fetchall()
  print("The previous salary was ",old_sal[0])
  increment = ("Update employee_Info set salary = %s where employee_Id = '%s' ;")
  employee_Info =  (emp_sal, Employee_Id)
  cursor.execute(increment%employee_Info)
  conn.commit()
  print("salary updated")
  back()
def startup():
  
  print("WELCOME TO EMPLOYEES MANAGEMENT SERVICE ")
  work = input("To continue please login in or create and account(login/createacc)")
  if work.lower() == "login" :
    login()
  if work.lower()  == "createacc":
    createacc()
    print("congrats, your account is created")
    print("login to work on our software")
    login()
  works = ['login','createacc']
  while work.lower() not in works:
    work = input("please state one of the following(createacc/login)")
startup()
